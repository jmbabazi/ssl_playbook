---
- hosts: target
  sudo: yes
  vars_files:
      - ../group_vars/local
  
  tasks:
  - name: Ensure ssl folder exist
    file:
      path: "{{ ssl_certs_path }}"
      state: directory
      owner: "{{ ssl_certs_path_owner }}"
      group: "{{ ssl_certs_path_group }}"
    tags: ssl-certs

  - name: Check if Apache2 service exists
    stat: path=/etc/init.d/{{service_name}}
    register: service_status
    tags: ssl-certs

  - name: Stop Apache2 service if exists
    service: name={{service_name}} state=stopped
    when: service_status.stat.exists
    tags: ssl-certs
 
# Backup the existing ssl certificate folder
  - name: Create backup directory
    file: dest=/etc/ssl/ssl_backup state=directory owner=root
    tags: ssl-certs

  - name: stat certs
    stat: path=/etc/ssl/certs
    register: cert_stat
    tags: ssl-certs

  - name: Move certs to ssl_backup
    command: mv /etc/ssl/certs /etc/ssl/ssl_backup
    when: cert_stat.stat.exists
    tags: ssl-certs
   
  - name: stat private
    stat: path=/etc/ssl/private
    register: private_stat
    tags: ssl-certs

  - name: Move private to ssl_backup
    command: mv /etc/ssl/private /etc/ssl/ssl_backup
    when: private_stat.stat.exists
    tags: ssl-certs

  - name: stat openssl.cnf
    stat: path=/etc/ssl/openssl.cnf
    register: openssl_cnf_stat
    tags: ssl-certs
    ignore_errors: true

  - name: Move openssl.cnf to ssl_backup
    command: mv /etc/ssl/openssl.cnf /etc/ssl/ssl_backup
    when: openssl_cnf_stat.stat.exists
    tags: ssl-certs

# Extract new ssl certificate
 # - name: copy ssl conf file
 #   template:
 #     src={{ssl_file}}/ssl.conf.j2
 #     dest=/etc/httpd/conf.d/ssl.conf
 #     mode=644
 #     owner=root
 #     group=root
 #   tags: ssl

  #- name: Extract the certs
  #  shell: gunzip {{file_folder}}/ssl-certs.tar.gz
  
  
  - name: Extract tar
    unarchive: src={{ssl_folder}}/ssl-certs.tar dest=/etc/ssl
    tags:  ssl-certs

  - name: Start Apache2
    service: name={{service_name}} state=started enabled=yes
    tags: ssl-certs
